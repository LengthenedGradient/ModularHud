--@name Modular Shared Memory Library 3
--@author
--@shared

--[[
This library provides an interface for interacting with a pseudo shared memory.

The idea is that there is a table stored on both client and server, containing a set of variables and their types.

When a variable is updated on the server, it tells the client to update it to the same value, and vice-versa.

What I reference as the user here is either the server or the client (it doesn't matter because it works the same either way.)

The methods defined aren't very convenient for adding/removing variables, as it is not intended, but can still be achieved.

Contact (Discord: Len#4767) ((Please read comments before asking, I will try to help but I may be busy.))
]]--

// Various lookups to make things more abstract. If the type you are trying to transmit is not listed here, you can easilly add it to each of the following 3 table.
// This list is in no way exhaustive
local writeTypeLookup = {Boolean = net.writeBool, Float = net.writeFloat, String = net.writeString, Entity = net.writeEntity, Vector = net.writeVector, Angle = net.writeAngle, Table = net.writeTable}
local readTypeLookup = {Boolean = net.readBool, Float = net.readFloat, String = net.readString, Entity = net.readEntity, Vector = net.readVector, Angle = net.readAngle, Table = net.readTable} 
local nullTypeLookup = {Boolean = false, Float = 0.0, String = "null", Entity = nil, Vector = Vector(0,0,0), Angle = Angle(0,0,0), Table = {}}

local sharedMemory = class("shared_memory")
do
    --[[
    Initializes a sharedMemory user
        - nameTypePairs (nil or table) should contain key-value pairs representing a variables name and its type
            - (e.x. nameTypePairs = {Gun = "Entity", Speed = "Float"}
    ]]--
    function sharedMemory:initialize(nameTypePairs)
        self.variables = table.getKeys(nameTypePairs)
        self.valueLookup = {}
        self.typeLookup = {}
        self.callBackLookup = {}
        self.syncCallback = nil

        for k, v in pairs(nameTypePairs) do
            self.typeLookup[k] = v
            self.valueLookup[k] = nullTypeLookup[v]
            
            net.receive("shared_memory_variable_send_"..k,function()
                local value = readTypeLookup[self.typeLookup[k]]()            
                self.valueLookup[k] = value  
                if self.callBackLookup[k] ~= nil then self.callBackLookup[k](value) end
            end)
        end
        
        net.receive("shared_memory_sync", function() 
            local tbl = net.readTable()        
            self.variables = tbl[1]
            self.typeLookup = tbl[2]
            self.valueLookup = tbl[3]
            if self.syncCallback ~= nil then self.syncCallback() end
        end)
    end   

    // Single variable related functions
    
    --[[
    Sends a variable to update the other user, and saves it locally   
        - name is a string representing the variable's name
        - value is any value to update the value with
    Note: Any variable being sent must have been initialized beforehand. This is so that we don't have to specify the type each time we update a variable
    ]]--
    function sharedMemory:sendVar(name, value)
        if self.valueLookup[name] == value then return end // Returns from the function if it must check and there is no change
        self.valueLookup[name] = value
        net.start("shared_memory_variable_send_"..name) writeTypeLookup[self.typeLookup[name]](value) net.send()
    end

    function sharedMemory:setVarCallBack(name,callBack)
        self.callBackLookup[name] = callBack
    end

    --[[
    Initializes a variable in the current shared memory user. This will not be transmitted to the other user.
    ]]--    
    function sharedMemory:addLocalVar(name, value, type) 
        table.insert(self.variables)
        self.valueLookup[name] = value
        self.typeLookup[name] = type
    end
    
    --[[
    Removes a variable from the current shared memory user. This will not be transmitted to the other user.
    ]]--
    function sharedMemory:removeLocalVar(name, value)
        table.removeByValue(self.variables, name)
        table.remove(self.valueLookup, name)
        table.remove(self.typeLookup, name)
    end
    
    // Retrieval
    
    --[[
    Returns a value in the shared memory, given its name
    Acts as a wrapper.
    ]]--
    function sharedMemory:getVar(name)        
        return self.valueLookup[name]
    end
    
    // Group related functions
    
    --[[
    Sends variables in a "bundle/group" using one net message.
        - groupName is an arbitrary name given to the "bundle/group" of variables you are sending
        - nameValuePairs is a table containing key-value pairs of variable names and their corresponding values
    ]]--
    function sharedMemory:sendGroup(groupName,nameValuePairs)
        net.start("shared_memory_group_send_"..groupName)
        for k,v in pairs(nameValuePairs) do
            writeTypeLookup[self.typeLookup[k]](v)
        end
        net.send()
    end
    
    --[[
    Defines how to receive a "bundle/group" of multiple variables
        - groupName is the name of the group to receive
        - size is the number of variables to be received from the group
        - callback is called with a table containing key-value pairs of variable names and their corresponding values
    ]]--
    function sharedMemory:receiveGroup(groupName,size,callback)
        net.receive("shared_memory_group_send_"..groupName, function()
            local groupTransmitResult = {} // To be passed to callback
            for i = 1,size do
                local name = Names[i]
                local type = self.typeLookup[name]
                local value = readTypeLookup[Type]()
                self.valueLookup[name] = value                
                groupTransmitResult[Name] = value
            end
            if callback ~= nil then callback(groupTransmitResult) end 
            if changeCallback ~= nil then changeCallback() end   
        end)
    end
    
    // Initial setup functions
    
    --[[
    Sets the values of variables in a user locally. It does not update the other user.
    ]]--
    function sharedMemory:setVars(nameValuePairs)
        for k,v in pairs(nameValuePairs) do
            self.valueLookup[k] = v
        end
    end
    
    --[[
    Transmits all the data in the user to the other user.
    Note: this is a pretty expensive operation and I would recommend only using it at initialization to make sure both client and server have the same values.
    ]]--
    function sharedMemory:sync()
        net.start("shared_memory_sync")
        net.writeTable({self.variables, self.typeLookup, self.valueLookup})
        net.send()
    end
    
    --[[
    If provided with a callback, it will be called when the current user is synchronized
    ]]--
    function sharedMemory:setSyncCallBack(callBack)
        self.syncCallback = callBack
    end
    
    --[[
    Mostly for debugging, prints the contents of the shared memory user
    ]]--
    function sharedMemory:print()
        print("Shared Memory Table:")
        print("Name","Val","Type")
        for k, v in ipairs(self.variables) do
            local name = v
            local value = self.valueLookup[v]
            local type = self.typeLookup[v]
            print(name,value,type)
        end 
        return outStr
    end
end

return sharedMemory